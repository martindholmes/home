<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml"
	schematypens="http://purl.oclc.org/dsdl/schematron"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:sch="http://purl.oclc.org/dsdl/schematron" xmlns:xh="http://www.w3.org/1999/xhtml">
   <teiHeader>
      <fileDesc>
         <titleStmt>
            <title>Schema for my personal website</title>
            <author>Martin Holmes</author>
         </titleStmt>
         <publicationStmt>
            <p>Free for any purpose</p>
         </publicationStmt>
         <sourceDesc>
            <p>Created starting from the XHTML-as-ODD schema at <ref target="https://github.com/martindholmes/XHTML5-as-ODD">https://github.com/martindholmes/XHTML5-as-ODD</ref>.</p>
         </sourceDesc>
      </fileDesc>
   </teiHeader>
   <text>
      <front xml:id="frontMatter">
         <titlePage>
            <docTitle>
               <titlePart type="main">My personal website</titlePart>
            </docTitle>
            <docAuthor>Martin Holmes</docAuthor>
            <docDate>2025</docDate>
         </titlePage>
         <p>This schema is designed for my (very simple) personal website, which is authored in a
         very constrained XHTML5 format.</p>
         <divGen type="toc"/>
      </front>
      <body>
         <p>The schema is in the back element.</p>
      </body>
      <back>
         <div>
           <!-- We allow multiple starting elements for our schema so that we can 
                validate articles and page-component fragments in their own 
                discrete files, while also validating full pages created from them. -->
            <schemaSpec ident="mholmes.com" prefix="xh_" start="html body main article" ns="http://www.w3.org/1999/xhtml">
               <!-- Include the TEI tei module so we can use datatypes etc. We may change to 
                    direct use of xsd datatypes at some point. -->
               <moduleRef key="tei"/>
               
               
               <moduleSpec ident="mholmes.com">
                  <desc>Base schema module for all xhtml5 elements defined in this ODD.</desc>
               </moduleSpec>
               
               <elementSpec ident="html" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <gloss>The root html element for normal complete documents</gloss>
                  <desc>The html element is only root element allowed for conventional 
                  HTML5 documents, but we also allow other block elements to serve as 
                  root for pragmatic reasons.</desc>
                  <classes>
                     <memberOf key="att.identifiable"/>
                     <memberOf key="att.hasLang"/>
                     <memberOf key="att.classable"/>
                  </classes>
                  <content>
                     <sequence>
                        <elementRef key="head"/>
                        <elementRef key="body"/>
                     </sequence>
                  </content>
               </elementSpec>
               
               <elementSpec ident="head" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <gloss>The HTML head element</gloss>
                  <desc>The head element contains links to (external-only) CSS and JS, as 
                  well as a title element and meta tags. We impose an order here which is not
                  enforced by the HTML5 standard, placing the single title element first,
                  followed by meta tags, CSS, and script. One of the meta tags must be a 
                  charset specification.</desc>
                  <content>
                     <sequence>
                        <elementRef key="title" minOccurs="1" maxOccurs="1"/>
                        <elementRef key="base" minOccurs="0" maxOccurs="1"/>
                        <elementRef key="meta" minOccurs="1" maxOccurs="unbounded"/>
                        <elementRef key="link" minOccurs="0" maxOccurs="unbounded"/>
                        <elementRef key="script" minOccurs="0" maxOccurs="unbounded"/>
                     </sequence>
                  </content>
               </elementSpec>
               
               <elementSpec ident="title" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <gloss>Page title.</gloss>
                  <desc>The plain-text title of the page,
                  as shown in browser title bars.</desc>
                  <content>
                     <textNode/>
                  </content>
               </elementSpec>
               
               <elementSpec ident="meta" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <gloss>Header meta tag</gloss>
                  <desc>Used for specifying character set, metadata, etc.</desc>
                  <content>
                     <empty/>
                  </content>
                  <attList>
                     <attDef ident="charset" usage="opt">
                        <gloss>Character set (use only UTF-8)</gloss>
                        <valList type="closed">
                           <valItem ident="UTF-8">
                              <gloss>The only value we use is UTF-8.</gloss>
                           </valItem>
                        </valList>
                     </attDef>
                  </attList>
               </elementSpec>
               
               <elementSpec ident="base" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <gloss>Provides the base URL from which relative URLs are resolved.</gloss>
                  <desc>The base element allows authors to specify the document base URL for the purposes of parsing URLs, and the name of the default navigable for the purposes of following hyperlinks. The element does not represent any content beyond this information.</desc>
                  <classes>
                     <memberOf key="att.hasHref"/>
                  </classes>
                  <content>
                     <empty/>
                  </content>
                  <remarks>
                     <p>A base element, if it has an href attribute, must come before any other elements in the tree that have attributes defined as taking URLs, except the html element (its manifest attribute isn't affected by base elements).</p>
                     <p>In this schema, we eschew the <att>target</att> attribute because it is not
                     likely to be useful in the sorts of content we create.</p>
                  </remarks>
               </elementSpec>
               
               <elementSpec ident="body" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <gloss>The principal container for page content as shown in the browser</gloss>
                  <desc>In HTML5, the body element allows all flow content, but we are much more
                  constrained here, allowing only block-level elements.</desc>
                  <classes>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.identifiable"/>
                  </classes>
                  <content>
                     <!-- There are several canonical page structures which we attempt
                        to express as a single sequence. We want to allow for some variation
                        but impose some fairly severe logic. -->

                     <!-- h1 with divs, sections, main, or article, with asides and footers
                             scattered around. -->
                     <sequence>
                        <!-- You can have a plain h1, or you can have a header element. -->
                        <alternate minOccurs="0" maxOccurs="1">
                           <elementRef key="h1" minOccurs="1" maxOccurs="1"/>
                           <elementRef key="header" minOccurs="1" maxOccurs="1"/>
                        </alternate>
                        <!-- Now you can have an optional aside. -->
                        <elementRef key="aside" minOccurs="0" maxOccurs="1"/>
                        <!-- Then you can have divs, sections, an article, or a main element. -->
                        <alternate maxOccurs="1">
                           <elementRef key="div" minOccurs="1" maxOccurs="unbounded"/>
                           <elementRef key="section" minOccurs="1" maxOccurs="unbounded"/>
                           <elementRef key="main" minOccurs="1" maxOccurs="1"/>
                           <elementRef key="article" minOccurs="1" maxOccurs="1"/>
                        </alternate>
                        <!-- Now you can have another optional aside. -->
                        <elementRef key="aside" minOccurs="0" maxOccurs="1"/>
                        <!-- Finally an optional footer. -->
                        <elementRef key="footer" minOccurs="0" maxOccurs="1"/>
                     </sequence>    
                  </content>
               </elementSpec>
               
               <elementSpec ident="main" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <gloss>The main element, containing block content</gloss>
                  <desc>This is used as the root element for some content documents. This
                  allows divs, dialogs, or articles in alternation.</desc>
                  <classes>
                     <memberOf key="att.identifiable"/>
                     <memberOf key="att.hasTitle"/>
                  </classes>
                  <content>
                     <sequence>
                        <elementRef key="h2"/>
                        <alternate minOccurs="1" maxOccurs="unbounded">
                           <elementRef key="div"/>
                           <elementRef key="dialog"/>
                           <elementRef key="article" maxOccurs="unbounded"/>
                        </alternate>
                        <!-- We allow script here for staticSearch overrides. -->
                        <elementRef key="script" minOccurs="0" maxOccurs="unbounded"/>
                     </sequence>
                  </content>
               </elementSpec>
               
               <elementSpec ident="article" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <gloss>The principal container element, containing block content</gloss>
                  <desc>This is the root element for article documents.</desc>
                  <classes>
                     <memberOf key="att.identifiable"/>
                     <memberOf key="att.hasTitle"/>
                  </classes>
                  <content>
                     <sequence>
                        <elementRef key="h2"/>
                        <alternate minOccurs="1" maxOccurs="unbounded">
                           <macroRef key="macro.mhBlockContent"/>
                           <elementRef key="section" minOccurs="1" maxOccurs="unbounded"/>
                        </alternate>
                     </sequence>
                  </content>
                  <attList>
                     <attDef ident="data-shortname">
                        <gloss>This is a simplified name of the poet used in the case of very long poet names.</gloss>
                        <datatype>
                           <dataRef key="teidata.text"/>
                        </datatype>
                     </attDef>
                  </attList>
               </elementSpec>
               
               <elementSpec ident="aside" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <gloss>A portion of a document whose content is only indirectly related to the document's main content</gloss>
                  <desc>The aside element encloses content which is tangentially related to the content around it. It is used for callouts, footnotes/endnotes, and similar content.</desc>
                  <classes>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.identifiable"/>
                     <memberOf key="att.hasTitle"/>
                  </classes>
                  <content>
                     <sequence>
                        <elementRef key="h4" minOccurs="0" maxOccurs="unbounded"/>
                        <classRef key="model.mhBlockBody" minOccurs="0" maxOccurs="unbounded"/>
                     </sequence>
                  </content>
               </elementSpec>
               
               <elementSpec ident="section" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <gloss>A subsection of a page</gloss>
                  <desc>If using sections, there must be at least two.</desc>
                  <classes>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.identifiable"/>
                  </classes>
                  <content>
                     <sequence>
                        <elementRef key="h3" minOccurs="0" maxOccurs="1"/>
                        <macroRef key="macro.mhBlockContent"/>
                     </sequence>
                  </content>
               </elementSpec>
               
               <elementSpec ident="div" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <gloss>A division of the footer element or the search page.</gloss>
                  <desc>The div may be the main child of the main element.</desc>
                  <classes>
                     <memberOf key="att.identifiable"/>
                     <memberOf key="att.classable"/>
                  </classes>
                  <content>
                     <sequence>
                        <elementRef key="h3" minOccurs="0" maxOccurs="1"/>
                        <alternate minOccurs="1" maxOccurs="1">
                           <elementRef key="p"/>
                           <elementRef key="div"/>
                           <macroRef key="macro.mhBlockContent"/>
                        </alternate>
                     </sequence>
                     
                  </content>
               </elementSpec>
               
               <elementSpec ident="h1" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <gloss>Level 1 heading</gloss>
                  <desc>The h1(level 2 heading) element provides the heading for 
                     an entire page.</desc>
                  <classes>
                     <memberOf key="model.mhBlockHeading"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.hasTitle"/>
                  </classes>
                  <content>
                     <alternate minOccurs="1" maxOccurs="unbounded">
                        <macroRef key="macro.mhParaContent"/>
                        <elementRef key="br"/>
                     </alternate>
                  </content>
               </elementSpec>
               <elementSpec ident="h2" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <gloss>Level 2 heading</gloss>
                  <desc>The h2 (level 2 heading) element provides the heading for 
                  a major subsection of a page.</desc>
                  <classes>
                     <memberOf key="model.mhBlockHeading"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.hasTitle"/>
                  </classes>
                  <content>
                     <alternate minOccurs="1" maxOccurs="unbounded">
                        <macroRef key="macro.mhParaContent"/>
                        <elementRef key="br"/>
                     </alternate>
                  </content>
               </elementSpec>
               <elementSpec ident="h3" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <gloss>Level 3 heading</gloss>
                  <desc>The h3 (level 3 heading) element provides the heading for 
                  a secondary subsection of a page.</desc>
                  <classes>
                     <memberOf key="model.mhBlockHeading"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.hasTitle"/>
                  </classes>
                  <content>
                     <alternate minOccurs="1" maxOccurs="unbounded">
                        <macroRef key="macro.mhParaContent"/>
                        <elementRef key="br"/>
                     </alternate>
                  </content>
               </elementSpec>
               <elementSpec ident="h4" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <gloss>Level 4 heading</gloss>
                  <desc>The h4 (level 4 heading) element provides the heading for 
                     a sub-sub-subsection of a page.</desc>
                  <classes>
                     <memberOf key="model.mhBlockHeading"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.hasTitle"/>
                  </classes>
                  <content>
                     <alternate minOccurs="1" maxOccurs="unbounded">
                        <macroRef key="macro.mhParaContent"/>
                        <elementRef key="br"/>
                     </alternate>
                  </content>
               </elementSpec>
               <elementSpec ident="h5" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <gloss>Level 5 heading</gloss>
                  <desc>The h5 (level 5 heading) element provides a low-level heading.</desc>
                  <classes>
                     <memberOf key="model.mhBlockHeading"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.hasTitle"/>
                  </classes>
                  <content>
                     <alternate minOccurs="1" maxOccurs="unbounded">
                        <macroRef key="macro.mhParaContent"/>
                        <elementRef key="br"/>
                     </alternate>
                  </content>
               </elementSpec>
               <elementSpec ident="h6" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <gloss>Level 6 heading</gloss>
                  <desc>The h6 (level 6 heading) element is the lowest level of heading 
                     available.</desc>
                  <classes>
                     <memberOf key="model.mhBlockHeading"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.hasTitle"/>
                  </classes>
                  <content>
                     <alternate minOccurs="1" maxOccurs="unbounded">
                        <macroRef key="macro.mhParaContent"/>
                        <elementRef key="br"/>
                     </alternate>
                  </content>
               </elementSpec>
               <elementSpec ident="p" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <desc>Prose paragraph.</desc>
                  <classes>
                     <memberOf key="model.mhBlockBody"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.identifiable"/>
                  </classes>
                  <content>
                     <alternate minOccurs="0" maxOccurs="unbounded">
                        <macroRef key="macro.mhParaContent"/>
                        <elementRef key="br"/>
                     </alternate>
                  </content>
               </elementSpec>
               <elementSpec ident="details" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <desc>Expandable details element with summary child.</desc>
                  <classes>
                     <memberOf key="model.mhBlockBody"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.identifiable"/>
                  </classes>
                  <content>
                     <sequence>
                        <elementRef key="summary"/>
                        <macroRef key="macro.mhBlockContent"/>
                     </sequence>
                  </content>
               </elementSpec>
               <elementSpec ident="summary" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <desc>Single-line summary for details element.</desc>
                  <classes>
                     <memberOf key="model.mhPhrase"/>
                     <memberOf key="att.classable"/>
                  </classes>
                  <content>
                     <macroRef key="macro.mhParaContent"/>
                  </content>
               </elementSpec>
               <elementSpec ident="blockquote" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <desc>Block quotation.</desc>
                  <classes>
                     <memberOf key="model.mhBlockBody"/>
                     <memberOf key="att.classable"/>
                  </classes>
                  <content>
                     <alternate minOccurs="1" maxOccurs="unbounded">
                        <elementRef key="p"/>
                        <elementRef key="ul"/>
                        <elementRef key="br"/>
                        <macroRef key="macro.mhParaContent"/>
                     </alternate>
                  </content>
               </elementSpec>
               <elementSpec ident="q" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <desc>Inline quotation. In rendering, quotation marks will be supplied, so do not
                     include them.</desc>
                  <classes>
                     <memberOf key="model.mhPhrase"/>
                     <memberOf key="att.classable"/>
                  </classes>
                  <content>
                     <alternate minOccurs="1" maxOccurs="unbounded">
                        <elementRef key="br"/>
                        <macroRef key="macro.mhParaContent"/>
                     </alternate>
                  </content>
               </elementSpec>
               <elementSpec ident="ul" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <desc>Unordered list, usually bulleted.</desc>
                  <classes>
                     <memberOf key="model.mhBlockBody"/>
                     <memberOf key="att.classable"/>
                  </classes>
                  <content>
                     <elementRef key="li" minOccurs="1" maxOccurs="unbounded"/>
                  </content>
                  <attList>
                     <attDef ident="class" mode="change">
                        <valList mode="add">
                           <valItem ident="referenceList">
                              <gloss>A reference list at the end of an article.</gloss>
                           </valItem>
                        </valList>
                     </attDef>
                  </attList>
               </elementSpec>
               <elementSpec ident="ol" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <desc>Ordered list, usually numbered.</desc>
                  <classes>
                     <memberOf key="model.mhBlockBody"/>
                     <memberOf key="att.classable"/>
                  </classes>
                  <content>
                     <elementRef key="li" minOccurs="1" maxOccurs="unbounded"/>
                  </content>
               </elementSpec>
               <elementSpec ident="li" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <desc>Item in a list or a menu.</desc>
                  <classes>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.identifiable"/>
                  </classes>
                  <content>
                     <alternate minOccurs="0" maxOccurs="unbounded">
                        <elementRef key="ul"/>
                        <elementRef key="ol"/>
                        <elementRef key="p"/>
                        <macroRef key="macro.mhParaContent"/>
                        <elementRef key="br"/>
                     </alternate>
                  </content>
               </elementSpec>
               <elementSpec ident="pre" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <desc>Preformatted text which is to be presented exactly as written in the HTML file.</desc>
                  <classes>
                     <memberOf key="model.mhBlockBody"/>
                  </classes>
                  <content>
                     <textNode/>
                  </content>
               </elementSpec>
               <elementSpec ident="span" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <desc>General-purpose phrase-level element. Use only if there is no more specific
                     alternative for what you want.</desc>
                  <classes>
                     <memberOf key="model.mhPhrase"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.hasLang"/>
                     <memberOf key="att.hasnametype"/>
                  </classes>
                  <content>
                     <alternate minOccurs="0" maxOccurs="unbounded">
                        <macroRef key="macro.mhParaContent"/>
                        <elementRef key="br"/>
                     </alternate>
                  </content>
                  <!-- NOTE: Leaving this in place, but we expect this to be 
                   changed or expanded. -->
                  <constraintSpec ident="spansMustHaveNametypeStyleOrClass" scheme="schematron">
                     <constraint>
                        <sch:rule context="xh:span">
                        <sch:assert test="@class or @style or @data-nametype"> 
                           A span element must have a class attribute, a data-nametype attribute, or a style attribute.
                        </sch:assert>
                        </sch:rule>
                     </constraint>
                  </constraintSpec>
               </elementSpec>
               <elementSpec ident="abbr" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <gloss>Abbreviation</gloss>
                  <desc>Any abbreviation, acronym, or similar term can be tagged with this element,
                     and the <att>title</att> attribute can be used to provide an expansion.</desc>
                  <classes>
                     <memberOf key="model.mhPhrase"/>
                     <memberOf key="att.classable"/>
                  </classes>
                  <content>
                     <macroRef key="macro.mhParaContent"/>
                  </content>
               </elementSpec>
               
               <elementSpec ident="address" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <gloss>Address</gloss>
                  <desc>Contains contact information for a person or organization related to the nearest
                  ancestor <gi>article</gi> or <gi>body</gi> element.</desc>
                  <classes>
                     <memberOf key="model.mhPhrase"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.hasId"/>
                  </classes>
                  <content>
                     <macroRef key="macro.mhParaContent"/>
                  </content>
               </elementSpec>
               
               <elementSpec ident="strong" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <gloss>Strong text</gloss>
                  <desc>Text that needs to be highlighted because it is important; will be rendered by
                     default in bold.</desc>
                  <classes>
                     <memberOf key="model.mhPhrase"/>
                     <memberOf key="att.classable"/>
                  </classes>
                  <content>
                     <macroRef key="macro.mhParaContent"/>
                  </content>
               </elementSpec>
               <elementSpec ident="code" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <gloss>Inline computer code, filenames etc.</gloss>
                  <desc>Inline text which is computer code or similar text such as identifiers.</desc>
                  <classes>
                     <memberOf key="model.mhPhrase"/>
                     <memberOf key="att.classable"/>
                  </classes>
                  <content>
                     <macroRef key="macro.mhParaContent"/>
                  </content>
               </elementSpec>
               
               <elementSpec ident="colgroup" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <gloss>Column group.</gloss>
                  <desc>Defines a group of columns within a table.</desc>
                  <classes>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.hasSpan"/>
                  </classes>
                  <content>
                     <elementRef key="col" minOccurs="1" maxOccurs="unbounded"/>
                  </content>
               </elementSpec>
               
               <elementSpec ident="col" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <gloss>A table column.</gloss>
                  <desc>Specifies a table column within a <gi>colgroup</gi> element.</desc>
                  <classes>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.hasSpan"/>
                  </classes>
                  <content>
                     <empty/>
                  </content>
               </elementSpec>
               
               <elementSpec ident="img" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <desc>Image element. May be rendered inline or as a block, depending on where it
                     appears in the document structure.</desc>
                  <classes>
                     <memberOf key="model.mhPhrase"/>
                     <memberOf key="model.mhBlockBody"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.identifiable"/>
                     <memberOf key="att.hasWidthAndHeight"/>
                  </classes>
                  <constraintSpec ident="imgWithoutCaptionNeedsAlt" scheme="schematron">
                     <constraint>
                        <sch:rule context="xh:img">
                           <sch:assert test="@alt or following-sibling::xh:figcaption"> 
                              If your img element is not inside a figure element with a figcaption, 
                              then it requires the @alt attribute to provide help for visually-impaired users.
                           </sch:assert>
                        </sch:rule>
                     </constraint>
                  </constraintSpec>
                  <attList>
                     <attDef ident="src" usage="req">
                        <gloss>path to the image (usually a relative path)</gloss>
                        <datatype>
                           <dataRef key="teidata.pointer"/>
                        </datatype>
                     </attDef>
                     <attDef ident="alt" usage="opt">
                        <gloss>description of the image for visually-impaired users. If not supplied,
                        then figcaption will be used instead.</gloss>
                        <datatype>
                           <dataRef key="teidata.text"/>
                        </datatype>
                     </attDef>
                     <attDef ident="title" usage="opt">
                        <gloss>description of the image which will pop up on mouseover. If not supplied,
                           then figcaption will be used instead.</gloss>
                        <datatype>
                           <dataRef key="teidata.text"/>
                        </datatype>
                     </attDef>
                  </attList>
               </elementSpec>
               <elementSpec ident="source" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <desc>The <gi>source</gi> HTML element specifies one or more media resources for the, <gi>audio</gi> and <gi>video</gi> elements.</desc>
                  <attList>
                     <attDef ident="src" usage="req">
                        <gloss>Pointer to the source media file.</gloss>
                        <datatype>
                           <dataRef key="teidata.pointer"/>
                        </datatype>
                     </attDef>
                     <attDef ident="type" usage="req">
                        <gloss>The mime type specifies the applicable multimedia internet mail extension (MIME) media type</gloss>
                        <!-- NOTE: THIS NEEDS TO BE NAILED DOWN TO SPECIFIC MIME TYPES. -->
                        <datatype>
                           <dataRef key="teidata.word"/>
                        </datatype>
                     </attDef>
                  </attList>
               </elementSpec>
               <elementSpec ident="audio" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <desc>The <gi>audio</gi> element provides an audio player to play an audio
                  file specified in the child <gi>source</gi> element.</desc>
                  <classes>
                     <memberOf key="model.mhPhrase"/>
                     <memberOf key="model.mhBlockBody"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.identifiable"/>
                  </classes>
                  <content>
                     <elementRef key="source" minOccurs="1" maxOccurs="unbounded"/>
                  </content>
                  <attList>
                     <attDef ident="controls" usage="rec">
                        <valList type="closed">
                           <valItem ident="controls">
                              <gloss>Specifies that default audio controls should be provided for the player.</gloss>
                           </valItem>
                        </valList>
                     </attDef>
                  </attList>
               </elementSpec>
               <elementSpec ident="video" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <desc>The <gi>video</gi> element provides a video player to play a video
                     file specified in the child <gi>source</gi> element.</desc>
                  <classes>
                     <memberOf key="model.mhPhrase"/>
                     <memberOf key="model.mhBlockBody"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.identifiable"/>
                     <memberOf key="att.hasWidthAndHeight"/>
                  </classes>
                  <content>
                     <elementRef key="source" minOccurs="1" maxOccurs="unbounded"/>
                  </content>
                  <attList>
                     <attDef ident="controls" usage="rec">
                        <valList type="closed">
                           <valItem ident="controls">
                              <gloss>Specifies that default video controls should be provided for the player.</gloss>
                           </valItem>
                        </valList>
                     </attDef>
                  </attList>
               </elementSpec>
               <elementSpec ident="canvas" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <gloss>An area for drawing graphics and animations</gloss>
                  <desc>The canvas element is a locus for drawing operations. Alternative content 
                  may be provided in the form of a limited number of phrase-level elements. If 
                  <att>width</att> and <att>height</att> are not provided, they default to 300
                  and 150 respectively.</desc>
                  <classes>
                     <memberOf key="model.mhPhrase"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.hasWidthAndHeight"/>
                  </classes>
                  <content>
                     <macroRef key="macro.mhParaContent"/>
                  </content>
               </elementSpec>
               
               <elementSpec ident="em" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <desc>Emphasized text; will be rendered by default in italics.</desc>
                  <classes>
                     <memberOf key="model.mhPhrase"/>
                     <memberOf key="att.classable"/>
                  </classes>
                  <content>
                     <alternate minOccurs="0" maxOccurs="unbounded">
                        <macroRef key="macro.mhParaContent"/>
                        <elementRef key="br"/>
                     </alternate>
                  </content>
               </elementSpec>
               <elementSpec ident="u" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <desc>Underlined text, in a context where we do not wish to conjecture 
                  why the underline is there (in an original article, or a quotation of 
                  an external source).</desc>
                  <classes>
                     <memberOf key="model.mhPhrase"/>
                     <memberOf key="att.classable"/>
                  </classes>
                  <content>
                     <alternate minOccurs="0" maxOccurs="unbounded">
                        <macroRef key="macro.mhParaContent"/>
                        <elementRef key="br"/>
                     </alternate>
                  </content>
               </elementSpec>
               <elementSpec ident="a" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <classes>
                     <memberOf key="model.mhPhrase"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.hasHref"/>
                     <memberOf key="att.hasnametype"/>
                  </classes>
                  <content>
                     <macroRef key="macro.mhParaContent"/>
                  </content>
                  <attList>
                     <attDef ident="title" usage="opt">
                        <gloss>explanation of what is being linked to. Will pop up when
                        mousing over the link.</gloss>
                        <datatype>
                           <dataRef key="teidata.text"/>
                        </datatype>
                     </attDef>
                     <attDef ident="target" usage="opt">
                        <valList type="closed">
                           <valItem ident="_blank">
                              <gloss>Open this link in a new window or tab.</gloss>
                           </valItem>
                        </valList>
                     </attDef>
                  </attList>
               </elementSpec>
               <elementSpec ident="dialog" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <desc>An HTML dialog element</desc>
                  <classes>
                     <memberOf key="model.mhBlockBody"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.identifiable"/>
                  </classes>
                  <content>
                     <alternate minOccurs="1" maxOccurs="unbounded">
                        <elementRef key="p"/>
                        <elementRef key="figure"/>
                        <elementRef key="div"/>
                     </alternate>
                  </content>
               </elementSpec>
               <elementSpec ident="cite" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <desc>An HTML cite element</desc>
                  <classes>
                     <memberOf key="model.mhBlockBody"/>
                     <memberOf key="model.mhPhrase"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.identifiable"/>
                  </classes>
                  <content>
                     <macroRef key="macro.mhParaContent"/>
                  </content>
               </elementSpec>
               
               <elementSpec ident="figure" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <desc>A figure consists of an image and a caption.</desc>
                  <classes>
                     <memberOf key="model.mhBlockBody"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.identifiable"/>
                     <memberOf key="att.hasTabindex"/>
                  </classes>
                  <content>
                     <alternate>
                        <elementRef key="p" minOccurs="1" maxOccurs="unbounded"/>
                        <sequence>
                        <elementRef key="img"/>
                        <elementRef key="figcaption" minOccurs="0"/>
                     </sequence>
                     </alternate>
                     
                  </content>
                  <attList>
                     <attDef ident="class" mode="change" usage="opt">
                        <valList type="closed" mode="add">
                           <valItem ident="leftFloat">
                              <gloss>Float this figure to the left and flow the text around it.</gloss>
                           </valItem>
                           <valItem ident="center">
                              <gloss>Centre this figure and do not float text around it.</gloss>
                           </valItem>
                           <valItem ident="rightFloat">
                              <gloss>Float this figure to the right and flow the text around it.</gloss>
                           </valItem>
                           <valItem ident="lightbox-figure">
                              <gloss>Used for a figure which appears in the ad gallery.</gloss>
                           </valItem>
                        </valList>
                     </attDef>
                     
                  </attList>
               </elementSpec>
               <elementSpec ident="br" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <desc>A hard-coded linebreak. Avoid unless you absolutely need it. Use it at the 
                  end of lines in poems.</desc>
                  <classes>
                     <memberOf key="att.classable"/>
                  </classes>
                  <content>
                     <empty/>
                  </content>
               </elementSpec>
               <elementSpec ident="figcaption" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <desc>Caption for an image in a figure element.</desc>
                  <classes>
                     <memberOf key="model.mhPhrase"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.identifiable"/>
                     <memberOf key="att.hasTabindex"/>
                  </classes>
                  <content>
                     <macroRef key="macro.mhParaContent"/>
                  </content>
               </elementSpec>
               <elementSpec ident="td" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <desc>A table data cell.</desc>
                  <content>
                     <macroRef key="macro.mhParaContent"/>
                  </content>
               </elementSpec>
               <elementSpec ident="button" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <desc>An HTML button element.</desc>
                  <classes>
                     <memberOf key="model.mhBlockBody"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.identifiable"/>
                     <memberOf key="att.hasTabindex"/>
                  </classes>
                  <content>
                     <macroRef key="macro.mhParaContent"/>
                  </content>
               </elementSpec>
               <elementSpec ident="th" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <desc>A table label or heading cell.</desc>
                  <content>
                     <macroRef key="macro.mhParaContent"/>
                  </content>
                  <attList>
                     <attDef ident="scope" usage="opt">
                        <valList type="closed">
                           <valItem ident="col">
                              <gloss>Scope of this heading is the column below it.</gloss>
                           </valItem>
                           <valItem ident="row">
                              <gloss>Scope of this heading is the row to the right of it.</gloss>
                           </valItem>
                        </valList>
                     </attDef>
                  </attList>
               </elementSpec>
               <elementSpec ident="tr" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <desc>A table row.</desc>
                  <content>
                     <sequence minOccurs="1" maxOccurs="unbounded">
                        <elementRef key="th" minOccurs="0" maxOccurs="unbounded"/>
                        <elementRef key="td" minOccurs="0" maxOccurs="unbounded"/>
                     </sequence>
                  </content>
               </elementSpec>
               <elementSpec ident="caption" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <desc>A table caption.</desc>
                  <content>
                     <macroRef key="macro.mhParaContent"/>
                  </content>
               </elementSpec>
               <elementSpec ident="table" ns="http://www.w3.org/1999/xhtml" module="mholmes.com">
                  <desc>A table.</desc>
                  <classes>
                     <memberOf key="att.classable"/>
                     <memberOf key="model.mhBlockBody"/>
                  </classes>
                  <content>
                     <sequence>
                        <elementRef key="caption" minOccurs="0" maxOccurs="1"/>
                        <elementRef key="colgroup" minOccurs="0" maxOccurs="unbounded"/>
                        <elementRef key="tr" minOccurs="1" maxOccurs="unbounded"/>
                     </sequence>
                  </content>
               </elementSpec>
               <macroSpec ident="macro.mhParaContent" module="mholmes.com">
                  <desc>Content model for paragraph-type containers such as paragraphs, list items, and
                     so on.</desc>
                  <content>
                     <alternate minOccurs="0" maxOccurs="unbounded">
                        <textNode/>
                        <classRef key="model.mhPhrase"/>
                     </alternate>
                  </content>
               </macroSpec>
               <macroSpec ident="macro.mhBlockContent" module="mholmes.com">
                  <desc>Content model for div container.</desc>
                  <content>
                     <sequence>
                        <classRef key="model.mhBlockHeading" minOccurs="0" maxOccurs="unbounded"/>
                        <classRef key="model.mhBlockBody" minOccurs="0" maxOccurs="unbounded"/>
                     </sequence>
                  </content>
               </macroSpec>
               <classSpec ident="model.mhPhrase" type="model" module="mholmes.com">
                  <desc>Groups elements which can appear at the phrase level.</desc>
               </classSpec>
               <classSpec ident="model.mhBlockBody" type="model" module="mholmes.com">
                  <desc>Groups elements which can appear below the heading in an article or section.</desc>
               </classSpec>
               
               <classSpec ident="att.hasLang" type="atts" module="mholmes.com">
                  <desc>Groups elements which may have a language attribute.</desc>
                  <attList>
                     <attDef ident="lang" usage="opt">
                        <gloss>Specifies the language of the content of the element.</gloss>
                        <!-- NOTE: This should be constrained using a regex. -->
                        <datatype maxOccurs="1">
                           <dataRef key="teidata.word"/>
                        </datatype>
                        <valList type="semi">
                           <valItem ident="en"><gloss>English</gloss></valItem>
                           <valItem ident="fr"><gloss>French</gloss></valItem>
                           <valItem ident="it"><gloss>Italian</gloss></valItem>
                           <valItem ident="jp"><gloss>Japanese</gloss></valItem>
                           <valItem ident="zh"><gloss>Chinese</gloss></valItem>
                           <valItem ident="de"><gloss>German</gloss></valItem>
                           <valItem ident="la"><gloss>Latin</gloss></valItem>
                           <valItem ident="es"><gloss>Spanish</gloss></valItem>
                        </valList>
                     </attDef>
                  </attList>
               </classSpec>
               
               <classSpec ident="att.classable" type="atts" module="mholmes.com">
                  <desc>Groups elements which can have a class attribute.</desc>
                  <attList>
                     <attDef ident="class" usage="opt">
                        <gloss>The class attribute provides styles through rules in the CSS
                        stylesheet. </gloss>
                        <datatype maxOccurs="unbounded">
                           <dataRef key="teidata.word"/>
                        </datatype>
                     </attDef>
                     <attDef ident="style" usage="opt">
                        <gloss>The style attribute provides one-off style options for specific
                        and unusual cases. Do not use this unless you know that the element
                        you're styling is unlike any other element in the project.</gloss>
                        <datatype maxOccurs="1">
                           <dataRef key="teidata.text"/>
                        </datatype>
                     </attDef>
                  </attList>
               </classSpec>
               <classSpec ident="att.identifiable" type="atts" module="mholmes.com">
                  <desc>Groups elements which may have an id attribute.</desc>
                  <attList>
                     <attDef ident="id" usage="opt">
                        <datatype>
                           <dataRef name="ID"/>
                        </datatype>
                     </attDef>
                  </attList>
               </classSpec>
               <classSpec ident="att.hasnametype" type="atts" module="mholmes.com">
                  <gloss>Groups elements which have the @data-nametype attribute.</gloss>
                  <attList>
                     <attDef ident="data-nametype" usage="opt">
                        <valList type="closed" mode="add">
                           <valItem ident="monographTitle">
                              <gloss>Book or play title (will be italicized)</gloss>
                           </valItem>
                          <valItem ident="periodicalTitle">
                            <gloss>Title of newspaper, magazine, or journal (will be italicized)</gloss>
                          </valItem>
                           <valItem ident="poemTitle">
                              <gloss>Poem title (will be surrounded with quotes)</gloss>
                           </valItem>
                           <valItem ident="songTitle">
                              <gloss>Song title (will be surrounded with quotes)</gloss>
                           </valItem>
                           <valItem ident="articleTitle">
                              <gloss>Article title (will be surrounded with quotes)</gloss>
                           </valItem>
                           <valItem ident="persName">
                              <gloss>The name of a person</gloss>
                           </valItem>
                           <valItem ident="forename">
                              <gloss>The forename of a person, usually inside a persName.</gloss>
                           </valItem>
                           <valItem ident="surname">
                              <gloss>The surname of a person, usually inside a persName.</gloss>
                           </valItem>
                        </valList>
                     </attDef>
                  </attList>
               </classSpec>
               <classSpec ident="att.formatted" type="atts" module="mholmes.com">
                  <gloss>Groups elements which have the ... TODO...</gloss>
               </classSpec>
              
              <classSpec ident="att.hasHref" type="atts" module="mholmes.com">
                <gloss>Groups elements which have the <att>href</att> attribute.</gloss>
                <attList>
                  <attDef ident="href" usage="req">
                    <datatype>
                      <dataRef key="teidata.pointer"/>
                    </datatype>
                  </attDef>
                </attList>
              </classSpec>
               
               <classSpec ident="att.hasTitle" type="atts" module="mholmes.com">
                  <gloss>Groups elements which have the <att>title</att> attribute.</gloss>
                  <attList>
                     <attDef ident="title" usage="opt">
                        <datatype>
                           <dataRef key="teidata.text"/>
                        </datatype>
                     </attDef>
                  </attList>
               </classSpec>
               
               <classSpec ident="att.hasTabindex" type="atts" module="mholmes.com">
                  <gloss>Groups elements which have the <att>tabindex</att> attribute.</gloss>
                  <attList>
                     <attDef ident="tabindex" usage="opt">
                        <datatype><dataRef key="nonNegativeInteger"/></datatype>
                     </attDef>
                  </attList>
               </classSpec>
               
               <classSpec ident="att.hasWidthAndHeight" type="atts" module="mholmes.com">
                  <gloss>Groups elements which have <att>width</att> and <att>height</att>
                  attributes expressed as integers.</gloss>
                  <attList>
                     <attDef ident="width" usage="opt">
                        <desc>Width in pixels of the image.</desc>
                        <datatype>
                           <dataRef key="teidata.numeric"/>
                        </datatype>
                     </attDef>
                     <attDef ident="height" usage="opt">
                        <desc>Height in pixels of the image</desc>
                        <datatype>
                           <dataRef key="teidata.numeric"/>
                        </datatype>
                     </attDef>
                  </attList>
               </classSpec>
               
               <classSpec ident="att.hasSpan" type="atts" module="mholmes.com">
                  <gloss>Groups elements which have <att>span</att>
                     attributes expressed as integers.</gloss>
                  <attList>
                     <attDef ident="span" usage="opt">
                        <desc>Number of items such as columns spanned by the element bearing this attribute.</desc>
                        <datatype>
                           <dataRef key="teidata.numeric"/>
                        </datatype>
                     </attDef>
                  </attList>
               </classSpec>
               
               <!--        Global Schematron constraints    -->
               <constraintSpec ident="schVariables" scheme="schematron">
                  <constraint>
                     <sch:ns uri="http://www.w3.org/1999/xhtml" prefix="xh"/>
                     <sch:pattern>
                        <sch:let name="smartDouble" value="'[“”]'"/>
                        <sch:let name="smartSingle" value="'[‘’]'"/>
                        <sch:let name="straightDouble" value="'&#34;'"/>
                        <sch:let name="straightApos" value="''''"/>
                        <sch:let name="straightQuotes" value="concat('[', $straightDouble, $straightApos, ']')"/>
                     </sch:pattern>
                  </constraint>
               </constraintSpec>
               <constraintSpec ident="mh-noQuotesInText" scheme="schematron">
                  <constraint>
                     <sch:rule context="xh:*[text()][not(ancestor-or-self::xh:script or ancestor-or-self::xh:style or ancestor-or-self::xh:code or ancestor-or-self::xh:pre)]">
                        <sch:assert test="not(text()[matches(., $straightQuotes)])">
                           Do not use straight quotes in text. Use the q or 
                           span elements wherever possible; for apostrophes, 
                           use the smart version (’).
                        </sch:assert>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
               <constraintSpec ident="mh-noBadImageFilenames" scheme="schematron">
                  <constraint>
                     <sch:rule context="xh:img">
                        <sch:assert test="matches(@src, '^[a-zA-Z0-9/\._\-]+$')">
                           Image file paths must be well-formed (no spaces or punctuation).
                        </sch:assert>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
               <constraintSpec ident="mh-spacesAfterPeriods" scheme="schematron">
                  <constraint>
                     <sch:rule context="xh:*[not(self::xh:code or self::xh:pre)][text()]">
                        <sch:assert test="not(text()[matches(., '[^\.A-Z]\.[A-Z]')])">
                           Don't forget to put a space after every period.
                        </sch:assert>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
               <constraintSpec ident="mh-noSpacedPeriodEllipses" scheme="schematron">
                  <constraint>
                     <sch:rule context="xh:*[not(self::xh:code or self::xh:pre)][text()]">
                        <sch:assert test="not(text()[matches(., '\.\s*\.\s*\.')])">
                           Don't use literal periods to create an ellipsis. Use the 
                           ellipsis character (…, Control + Shift + period) instead.
                        </sch:assert>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
               <constraintSpec ident="mh-noSpacesInHrefs" scheme="schematron">
                  <constraint>
                     <sch:rule context="xh:a">
                        <sch:assert test="not(matches(@href, '\s+'))">
                           There should be no spaces in href attributes (links).
                        </sch:assert>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
               <constraintSpec ident="mh-noLinksInLinks" scheme="schematron">
                  <constraint>
                     <sch:rule context="xh:a">
                        <sch:assert test="not(descendant::xh:a[@href])">
                           Don't place links inside other links.
                        </sch:assert>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
               <constraintSpec ident="mh-periodsAndCommasOutsideLinks" scheme="schematron">
                  <constraint>
                     <sch:rule context="xh:a[@href]">
                        <sch:assert test="not(matches(., '[\.,:;]\s*$')) or matches(., '((Esq\.)|(A\.\s*W\.)|(\.\s*\.\s*\.))$')">
                           Don't include trailing periods and commas inside link text.
                        </sch:assert>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
               <!-- Excessive style constraint? -->
               <constraintSpec ident="mh-useProperEllipsis" scheme="schematron">
                  <constraint>
                     <sch:rule context="xh:*[not(self::xh:code or self::xh:pre)][text()]">
                        <sch:assert test="not(text()[matches(., '\.\.\.')])">
                           Use an ellipsis (…) rather than three periods.
                        </sch:assert>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
               <!-- This is a mostly idiosyncratic preference, because having a reliable
                    id on the root makes processing easier for document collections. -->
               <constraintSpec ident="mh-idShouldMatchFilename" scheme="schematron">
                  <constraint>
                     <sch:rule context="xh:article | xh:main | xh:html">
                        <sch:let name="fname" value="concat(@id, '.xml')"/>
                        <sch:assert test="ends-with(document-uri(/), $fname)">
                           ERROR: The @id of your document (<sch:value-of select="@id"/>) 
                           does not match the document file name (<sch:value-of select="document-uri(/)"/>).
                        </sch:assert>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
            </schemaSpec>
         </div>
      </back>
   </text>
</TEI>